#!/bin/bash
set -e

psql -v ON_ERROR_STOP=1 --username postgres --dbname "$POSTGRES_DB" <<-EOSQL
	CREATE ROLE $POSTGRES_UNPRIV_USER_SCA_WEB WITH LOGIN ENCRYPTED PASSWORD '$POSTGRES_PASSWORD';
	DROP SCHEMA IF EXISTS $POSTGRES_SCHEMA CASCADE;
	CREATE SCHEMA $POSTGRES_SCHEMA;
	ALTER SCHEMA $POSTGRES_SCHEMA OWNER TO $POSTGRES_UNPRIV_USER_SCA_WEB;
	GRANT USAGE ON SCHEMA public TO $POSTGRES_UNPRIV_USER_SCA_WEB;

	CREATE OR REPLACE FUNCTION public.update_timestamps()
  	RETURNS TRIGGER AS \$\$
	BEGIN
  		IF TG_OP = 'INSERT' THEN
			NEW.created_timestamp := CURRENT_TIMESTAMP;
			NEW.last_updated_timestamp := CURRENT_TIMESTAMP;
			RETURN NEW;
  		ELSIF TG_OP = 'UPDATE' THEN
			NEW.last_updated_timestamp := CURRENT_TIMESTAMP;
			RETURN NEW;
		END IF;
  		RETURN NULL; -- Return NULL for other cases (e.g., DELETE)
	END;
	\$\$ LANGUAGE plpgsql;
	ALTER FUNCTION public.update_timestamps() OWNER TO postgres;
	GRANT EXECUTE ON FUNCTION public.update_timestamps() TO $POSTGRES_UNPRIV_USER_SCA_WEB;

	CREATE ROLE $POSTGRES_UNPRIV_USER_SCA_WORKER WITH LOGIN ENCRYPTED PASSWORD '$POSTGRES_PASSWORD';
	GRANT USAGE ON SCHEMA $POSTGRES_SCHEMA TO $POSTGRES_UNPRIV_USER_SCA_WORKER;
EOSQL
